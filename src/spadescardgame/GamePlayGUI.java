
package spadescardgame;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.JComponent;
import java.util.*;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Munanga
 * @author Kyle Smith
 */
public class GamePlayGUI extends javax.swing.JFrame {
       
    private Deck deck = new Deck();
    private int [] scores = new int[4];
    
    // create game players
    private Player player;
    private AI jane;
    private AI bob;
    private AI liz;
    
    // check whether human can play 
    private boolean playerTurnToPlay = false;
    
    // num of cards
    private int numberOfCardsLeft = 13;
    
    // round
    private int round = 1;
    String roundString;
    static int winningcard;
    //winner of last round will current round
    static String winningplayer = "";
    //active suite
    static String suiteled = "";
    static String username = "";
    
    //scores in String form
    static String ai1_Score = "0";
    static String ai2_Score = "0";
    static String ai3_Score = "0";
    static String playerScore = "0";
    
    static boolean cardselect;
    static boolean round1done = false;
    static boolean cutattempt;
    
    //copies of cards played
    static Card playercard = new Card(0,0);
    static Card ai1card = new Card(0,0);
    static Card ai2card = new Card(0,0);
    static Card ai3card = new Card(0,0);
    public GamePlayGUI() {
        initComponents();
        deck.shuffle();
        username = (String)JOptionPane.showInputDialog(null, "What's your name?");
        
        // instantiate game players
        player = new Player(username);
        jane = new AI("Jane",1);
        bob = new AI("Bob",2);
        liz = new AI("Liz",3);
        //jTable1.getTableHeader().set
        //create new DefaultTableModel model2
        DefaultTableModel model2 = (DefaultTableModel)jTable2.getModel();
        JOptionPane.showMessageDialog(null, "Welcome " + username);
        jTextPane1.setText(username);  
        
        roundString = Integer.toString(round);
        jTextField9.setText(roundString);
        
        gameLoop();
        gameOverCheck();
        addRowsToTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel23 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setText("Quit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 570, -1, -1));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "You", "Jane", "Bob", "Liz"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(26);
        jScrollPane1.setViewportView(jTable1);

        jLayeredPane1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 500, 370, 80));

        jTextPane1.setEditable(false);
        jTextPane1.setBorder(null);
        jTextPane1.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jScrollPane2.setViewportView(jTextPane1);

        jLayeredPane1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 510, 150, 30));

        jButton1.setText("Deal");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, -1, -1));

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jTextField1.setText("Round");
        jTextField1.setBorder(null);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 20, 70, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jLayeredPane1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 390, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        jLayeredPane1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 390, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        jLayeredPane1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 390, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        jLayeredPane1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 390, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        jLayeredPane1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 390, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        jLayeredPane1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 390, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N
        jLayeredPane1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 390, -1, -1));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N
        jLayeredPane1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 390, -1, -1));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N
        jLayeredPane1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 390, -1, -1));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N
        jLayeredPane1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 390, -1, -1));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N
        jLayeredPane1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 390, -1, -1));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });
        jLayeredPane1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 390, -1, -1));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
        });
        jLayeredPane1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, -1, -1));

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLayeredPane1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 180, -1, -1));

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLayeredPane1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, -1, -1));

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/b1fv.png"))); // NOI18N
        jLayeredPane1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel17.setName("jLabel17"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE))
                .addGap(51, 51, 51)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 62, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jLayeredPane1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 130, 350, 240));

        jTextField6.setEditable(false);
        jTextField6.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jTextField6.setText("Jane");
        jTextField6.setBorder(null);
        jLayeredPane1.add(jTextField6, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 130, -1, -1));

        jTextField7.setEditable(false);
        jTextField7.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jTextField7.setText("Bob");
        jTextField7.setBorder(null);
        jLayeredPane1.add(jTextField7, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 40, -1, -1));

        jTextField8.setEditable(false);
        jTextField8.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jTextField8.setText("Liz");
        jTextField8.setBorder(null);
        jLayeredPane1.add(jTextField8, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 130, -1, -1));

        jTextField9.setEditable(false);
        jTextField9.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jTextField9.setBorder(null);
        jLayeredPane1.add(jTextField9, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 10, 50, 40));

        jLabel21.setText("Score");
        jLayeredPane1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 530, -1, -1));

        jLabel22.setText("Bid");
        jLayeredPane1.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 560, -1, -1));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "History"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        jLayeredPane1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 410, 90));

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardbackground.jpg"))); // NOI18N
        jLayeredPane1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1100, 610));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
    
    // temp method to display which card was played
    public void playedCard(int index){
        JOptionPane.showMessageDialog(null, "clicked " + player.getPlayerCardDeck().get(index).getSuitString() + player.getPlayerCardDeck().get(index).getSuitNumberString());
        numberOfCardsLeft--;
    }
    
    public void removePlayedCardFromGUI(javax.swing.JLabel label){
        label.setVisible(false);
        jLayeredPane1.remove(label);
       
    }
    public void setTableVisible(){
        jLabel17.setVisible(true);
        jLabel18.setVisible(true);
        jLabel19.setVisible(true);
        jLabel20.setVisible(true);
    }
    public void setTableInvisible(){
        jLabel17.setVisible(false);
        jLabel18.setVisible(false);
        jLabel19.setVisible(false);
        jLabel20.setVisible(false);
 
    }
    public void setJlabelImage(javax.swing.JLabel label, int index, int playerOrAI){
        
        switch (playerOrAI) {
            case 0:
                label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/"+player.getPlayerCardDeck().get(index).getImage())));
                break;
            case 1:
                label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/"+jane.selectCard(index).getImage())));
                break;
            case 2:
                label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/"+bob.selectCard(index).getImage())));
                break;
            case 3:
                label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/"+liz.selectCard(index).getImage())));
                break;
                
        }
        
    }    
    
    public void gameOverCheck(){
      
        
        if(numberOfCardsLeft == 0){
            JOptionPane.showMessageDialog(null, "Game Over!! \nPlayer score: " + scores[0] + 
                    "\nJane score: " + scores[1] + 
                    "\nBob score: " + scores[2] + 
                    "\nLiz score: " + scores[3]); 
           
        }
    }
    
    public void gameLoop(){
        
            MouseListener mouseListener;
        mouseListener = new MouseAdapter() {
            //controls who plays the first card of each round(winner of the last round)
            public String turnswitch(){
                if(round1done)
                {
                    return winningplayer;
                }
                //The user will always go first during the first round
                return username;
            }
            //method to keep track of the suite of the first card played of each round
            public String suiteLed()
            {
                if(winningplayer.equals(username))
                {
                    suiteled = Integer.toString(playercard.getSuit());
                }
                else if(winningplayer.equals("Jane"))
                {
                    suiteled = Integer.toString(ai1card.getSuit());
                }
                else if(winningplayer.equals("Bob"))
                {
                    suiteled = Integer.toString(ai2card.getSuit());
                }
                else if(winningplayer.equals("Liz"))
                {
                    suiteled = Integer.toString(ai3card.getSuit());
                }
                return suiteled;
            }
            /*method to keep track of the highest card possible depending on the suite
            led and just in case the user chooses the hard difficulty*/
            public Card highestCardPossible()
            {
                Card highcard = playercard;
                if(cutattempt = true || suiteled.equals("Spades"))
                {
                    highcard = new Card(0,12);
                }
                if(suiteled.equals("Hearts"))
                {
                    highcard = new Card(2,12);
                }
                else if(suiteled.equals("Diamonds")){
                    highcard = new Card(1,12);
                }
                else if(suiteled.equals("Clubs"))
                {
                    highcard = new Card(3,12);
                }
                return highcard;
            }
            public boolean cutMade(){
                highestCardPossible();
            }
            @Override
            public void mouseClicked(MouseEvent evt) {
                
                String name = ((javax.swing.JLabel)evt.getSource()).getName();
                try{
                    // check jLabel name
                    switch (name) {
                        case "jLabel1":
                            
                            playedCard(0);
                            setJlabelImage(jLabel17,0,0);
                            removePlayedCardFromGUI(jLabel1);
                            
                            
                            //                        ArrayList<Card> temp = jane.getAICards();
                            //                        for (Card i : temp){
                            //                            System.out.println("ai = " + i.getFaceValue());
                            //                        }
                            //
                            //                        ArrayList<Card> temp2 = player.getPlayerCardDeck();
                            //                        for (Card i : temp2){
                            //                            System.out.println("player = " + i.getFaceValue());
                            //                        }
                            //
                            //
                            //                        System.out.println("|player| = " + player.getPlayerCardDeck().get(0).getFaceValue());
                            //                        System.out.println("|ai| = " + jane.selectCard(0).getFaceValue());

                            // ai plays
                            //jane
                            setJlabelImage(jLabel18,0,1);
                            // bob
                            setJlabelImage(jLabel19,0,2);
                            // liz
                            setJlabelImage(jLabel20,0,3);
                           
                            setTableVisible();
                            
                            // compare cards
                            getHandWinner(player.getPlayerCardDeck().get(0),jane.selectCard(0),bob.selectCard(0),liz.selectCard(0));
                            playercard = player.getPlayerCardDeck().get(0);
                            //store copies of cards
                            ai1card = jane.selectCard(0);
                            ai2card = bob.selectCard(0);
                            ai3card = liz.selectCard(0);
                            
                            break;
                        case "jLabel2":
                            
                            playedCard(1);
                            setJlabelImage(jLabel17,1,0);
                            removePlayedCardFromGUI(jLabel2);
                            
                            // ai plays then
                            //jane
                            setJlabelImage(jLabel18,1,1);
                            // bob
                            setJlabelImage(jLabel19,1,2);
                            // liz
                            setJlabelImage(jLabel20,1,3);
                           
                            setTableVisible();
                            
                            // compare cards
                            getHandWinner(player.getPlayerCardDeck().get(1),jane.selectCard(1),bob.selectCard(1),liz.selectCard(1));
                            playercard = player.getPlayerCardDeck().get(1);
                            //store copies of cards
                            ai1card = jane.selectCard(1);
                            ai2card = bob.selectCard(1);
                            ai3card = liz.selectCard(1);
                               
                            break;
                        case "jLabel3":
                            
                            playedCard(2);
                            setJlabelImage(jLabel17,2,0);
                            removePlayedCardFromGUI(jLabel3);
                            
                            
                            
                            // ai plays then
                            //jane
                            setJlabelImage(jLabel18,2,1);
                            // bob
                            setJlabelImage(jLabel19,2,2);
                            // liz
                            setJlabelImage(jLabel20,2,3);
                           
                            setTableVisible();
                            
                            // compare cards
                            getHandWinner(player.getPlayerCardDeck().get(2),jane.selectCard(2),bob.selectCard(2),liz.selectCard(2));
                            //store copies of cards
                            ai1card = jane.selectCard(2);
                            ai2card = bob.selectCard(2);
                            ai3card = liz.selectCard(2);
                            break;
                        case "jLabel4":
                            
                            playedCard(3);
                            setJlabelImage(jLabel17,3,0);
                            removePlayedCardFromGUI(jLabel4);
                            
                            //jane
                            setJlabelImage(jLabel18,3,1);
                            // bob
                            setJlabelImage(jLabel19,3,2);
                            // liz
                            setJlabelImage(jLabel20,3,3);
                           
                            setTableVisible();
                            
                            // compare cards
                            getHandWinner(player.getPlayerCardDeck().get(3),jane.selectCard(3),bob.selectCard(3),liz.selectCard(3));
                            //store copies of cards
                            ai1card = jane.selectCard(3);
                            ai2card = bob.selectCard(3);
                            ai3card = liz.selectCard(3);
                            break;
                        case "jLabel5":
                            
                            playedCard(4);
                            setJlabelImage(jLabel17,4,0);
                            removePlayedCardFromGUI(jLabel5);
                            
                            //jane
                            setJlabelImage(jLabel18,4,1);
                            // bob
                            setJlabelImage(jLabel19,4,2);
                            // liz
                            setJlabelImage(jLabel20,4,3);
                           
                            setTableVisible();
                            
                            // compare cards
                            getHandWinner(player.getPlayerCardDeck().get(4),jane.selectCard(4),bob.selectCard(4),liz.selectCard(4));
                            //store copies of cards
                            ai1card = jane.selectCard(4);
                            ai2card = bob.selectCard(4);
                            ai3card = liz.selectCard(4);
                            break;
                        case "jLabel6":
                            
                            playedCard(5);
                            setJlabelImage(jLabel17,5,0);
                            removePlayedCardFromGUI(jLabel6);
                            
                            //jane
                            setJlabelImage(jLabel18,5,1);
                            // bob
                            setJlabelImage(jLabel19,5,2);
                            // liz
                            setJlabelImage(jLabel20,5,3);
                           
                            setTableVisible();
                            
                            // compare cards
                            getHandWinner(player.getPlayerCardDeck().get(5),jane.selectCard(5),bob.selectCard(5),liz.selectCard(5));
                            //store copies of cards
                            ai1card = jane.selectCard(5);
                            ai2card = bob.selectCard(5);
                            ai3card = liz.selectCard(5);
                            break;
                        case "jLabel7":
                            
                            playedCard(6);
                            setJlabelImage(jLabel17,6,0);
                            removePlayedCardFromGUI(jLabel7);
                            
                            //jane
                            setJlabelImage(jLabel18,6,1);
                            // bob
                            setJlabelImage(jLabel19,6,2);
                            // liz
                            setJlabelImage(jLabel20,6,3);
                            
                            setTableVisible();
                            
                            // compare cards
                            getHandWinner(player.getPlayerCardDeck().get(6),jane.selectCard(6),bob.selectCard(6),liz.selectCard(6));
                            //store copies of cards
                            ai1card = jane.selectCard(6);
                            ai2card = bob.selectCard(6);
                            ai3card = liz.selectCard(6);
                            break;
                        case "jLabel8":
                            
                            playedCard(7);
                            setJlabelImage(jLabel17,7,0);
                            removePlayedCardFromGUI(jLabel8);
                            
                            //jane
                            setJlabelImage(jLabel18,7,1);
                            // bob
                            setJlabelImage(jLabel19,7,2);
                            // liz
                            setJlabelImage(jLabel20,7,3);
                            
                            setTableVisible();
                            
                            // compare cards
                            getHandWinner(player.getPlayerCardDeck().get(7),jane.selectCard(7),bob.selectCard(7),liz.selectCard(7));
                            //store copies of cards
                            ai1card = jane.selectCard(7);
                            ai2card = bob.selectCard(7);
                            ai3card = liz.selectCard(7);
                            break;
                        case "jLabel9":
                            
                            playedCard(8);
                            setJlabelImage(jLabel17,8,0);
                            removePlayedCardFromGUI(jLabel9);
                            
                            //jane
                            setJlabelImage(jLabel18,8,1);
                            // bob
                            setJlabelImage(jLabel19,8,2);
                            // liz
                            setJlabelImage(jLabel20,8,3);
                            
                            setTableVisible();
                            
                            // compare cards
                            getHandWinner(player.getPlayerCardDeck().get(8),jane.selectCard(8),bob.selectCard(8),liz.selectCard(8));
                            //store copies of cards
                            ai1card = jane.selectCard(8);
                            ai2card = bob.selectCard(8);
                            ai3card = liz.selectCard(8);
                            break;
                        case "jLabel10":
                            
                            playedCard(9);
                            setJlabelImage(jLabel17,9,0);
                            removePlayedCardFromGUI(jLabel10);
                            
                            //jane
                            setJlabelImage(jLabel18,9,1);
                            // bob
                            setJlabelImage(jLabel19,9,2);
                            // liz
                            setJlabelImage(jLabel20,9,3);
                            
                            setTableVisible();
                            
                            // compare cards
                            getHandWinner(player.getPlayerCardDeck().get(9),jane.selectCard(9),bob.selectCard(9),liz.selectCard(9));
                            //store copies of cards
                            ai1card = jane.selectCard(9);
                            ai2card = bob.selectCard(9);
                            ai3card = liz.selectCard(9);
                            break;
                        case "jLabel11":
                            
                            playedCard(10);
                            setJlabelImage(jLabel17,10,0);
                            removePlayedCardFromGUI(jLabel11);
                            
                            //jane
                            setJlabelImage(jLabel18,10,1);
                            // bob
                            setJlabelImage(jLabel19,10,2);
                            // liz
                            setJlabelImage(jLabel20,10,3);
                            
                            setTableVisible();
                            
                            // compare cards
                            getHandWinner(player.getPlayerCardDeck().get(10),jane.selectCard(10),bob.selectCard(10),liz.selectCard(10));
                            //store copies of cards
                            ai1card = jane.selectCard(10);
                            ai2card = bob.selectCard(10);
                            ai3card = liz.selectCard(10);
                            break;
                        case "jLabel12":
                            
                            playedCard(11);
                            setJlabelImage(jLabel17,11,0);
                            removePlayedCardFromGUI(jLabel12);
                            
                            //jane
                            setJlabelImage(jLabel18,11,1);
                            // bob
                            setJlabelImage(jLabel19,11,2);
                            // liz
                            setJlabelImage(jLabel20,11,3);
                            
                            setTableVisible();
                            
                            // compare cards
                            getHandWinner(player.getPlayerCardDeck().get(11),jane.selectCard(11),bob.selectCard(11),liz.selectCard(11));
                            //store copies of cards
                            ai1card = jane.selectCard(11);
                            ai2card = bob.selectCard(11);
                            ai3card = liz.selectCard(11);
                            break;
                        case "jLabel13":
                            
                            playedCard(12);
                            setJlabelImage(jLabel17,12,0);
                            removePlayedCardFromGUI(jLabel13);
                            
                            //jane
                            setJlabelImage(jLabel18,12,1);
                            // bob
                            setJlabelImage(jLabel19,12,2);
                            // liz
                            setJlabelImage(jLabel20,12,3);
                           
                            setTableVisible();
                           
                            // compare cards
                            getHandWinner(player.getPlayerCardDeck().get(12),jane.selectCard(12),bob.selectCard(12),liz.selectCard(12));
                            //store copies of cards
                            ai1card = jane.selectCard(12);
                            ai2card = bob.selectCard(12);
                            ai3card = liz.selectCard(12);
                            break;
                    }
                    round1done = true;
                }
                catch(Exception ie)
                {
                    ie.printStackTrace();
                }
            } 
        };

            // Add addMouseListener for player cards (jLabels 1 to 13)
            for (javax.swing.JLabel labels : Arrays.asList(jLabel1,jLabel2,jLabel3,jLabel4,jLabel5,jLabel6,jLabel7,jLabel8,jLabel9,jLabel10,jLabel11,jLabel12,jLabel13)) {
                labels.addMouseListener(mouseListener);
            }
              
       
    }
    //Add structure to the tables
    public void addRowsToTable(){
        //create new DefaultTableModel model1
        DefaultTableModel model1 = (DefaultTableModel)jTable1.getModel();
        //create new DefaultTableModel model2
        DefaultTableModel model2 = (DefaultTableModel)jTable1.getModel();
        for(int i = 0; i < 2; i++){
            model1.addRow(new Object[]{});
            model2.addRow(new Object[]{});
        }
    }
    
    
    public void getHandWinner(Card playerCard, Card firstAIplayerCard, Card secondAIplayerCard, Card thirdAIplayerCard){
        
        winningcard = playerCard.getFaceValue();
        winningplayer = username;
        //playercard = playerCard;
        if(firstAIplayerCard.getFaceValue() > playerCard.getFaceValue()){ 
            winningcard = firstAIplayerCard.getFaceValue();
            winningplayer = "Jane";
            //ai1card = firstAIplayerCard;
            if(secondAIplayerCard.getFaceValue() > firstAIplayerCard.getFaceValue()){
                winningcard = secondAIplayerCard.getFaceValue();
                winningplayer = "Bob";
                //ai2card = secondAIplayerCard;
                if(thirdAIplayerCard.getFaceValue() > secondAIplayerCard.getFaceValue()){
                    winningcard = thirdAIplayerCard.getFaceValue();
                    winningplayer = "Liz";
                    //ai3card = thirdAIplayerCard;
                }
            }
        }
        DefaultTableModel model1 = (DefaultTableModel)jTable1.getModel();
        DefaultTableModel model2 = (DefaultTableModel)jTable1.getModel();
        model1.setValueAt(username+" played: "+playercard.getFaceValue(),0,0);
        model1.setValueAt("Jane played: "+ai1card.getFaceValue(),0,1);
        model1.setValueAt("Bob played: "+ai2card.getFaceValue(),0,2);
        model1.setValueAt("Liz played: "+ai3card.getFaceValue(),0,3);
        //logic to update scores
        if (playerCard.getFaceValue() == winningcard){
            
            scores[0] = scores[0] + 1;
            playerScore = Integer.toString(scores[0]);
            model1.setValueAt(scores[0], 0, 0);
        }
        
        if(firstAIplayerCard.getFaceValue() == winningcard){
            
            scores[1] = scores[1] + 1;
            ai1_Score = Integer.toString(scores[1]);
            model1.setValueAt(scores[1], 0, 1);           
            
        }
        
        if(secondAIplayerCard.getFaceValue() == winningcard){
            
            scores[2] = scores[2] + 1;
            ai2_Score = Integer.toString(scores[2]);
            model1.setValueAt(scores[2], 0, 2);
            
            
        }
        if(thirdAIplayerCard.getFaceValue() == winningcard){
            
            scores[3] = scores[3] + 1;
            ai3_Score = Integer.toString(scores[3]);
            model1.setValueAt(scores[3], 0, 3);
            
        }
        
        gameOverCheck();
        round++;
        String a = Integer.toString(round);
        jTextField9.setText(a);
    }
    
       
    public void AI_playCard(){
        
    
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        javax.swing.JLabel [] playerCardJLabelArray = {jLabel1,jLabel2,jLabel3,jLabel4,jLabel5,jLabel6,jLabel7,jLabel8,jLabel9,jLabel10,jLabel11,jLabel12,jLabel13};

        for(int i = 0; i < 13; i++){
            playerCardJLabelArray[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/spadescardgame/Images/cardpics/"+ player.getPlayerCardDeck().get(i).getImage())));           
        }
       
        //getPlayerBid();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseClicked

    }//GEN-LAST:event_jLabel13MouseClicked

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel12MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MouseClicked
    
    private void getPlayerBid(){
        String bidpickup = (String)JOptionPane.showInputDialog(null, "Please enter your Bid: ");
        JOptionPane.showMessageDialog(null, "You bid: " + bidpickup);     
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GamePlayGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GamePlayGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GamePlayGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GamePlayGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GamePlayGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
